// Protocols common to both client and server
// Base container which stores all messages
message Container {
    optional Chat chat = 1;
    optional Login login = 2;
    optional LoginResponse loginResponse =3;
    optional SelectCity selectCity = 4;
    optional SelectCityResponse selectCityResponse = 5;
    repeated Map maps = 6;
    optional int32 serverState =7;
    
    optional GameState gameState = 10;
    
    // Client --> Server requests. 100-199
    optional bool requestServerState = 100;
    optional bool requestMaps = 101;
    optional string mapRequest = 102;
}

message Chat {
    //Chat message
    required string message = 1;
    optional string to = 2;
    optional string sender = 3; //Added by server
}

message Login {
    required string name = 1;
    required string password = 2 [default=""];
    required string regionPassword = 3 [default=""];
}

message LoginResponse {
    enum Type {
        FAILURE = 0;
        SUCCESS = 1;
    }
    required Type type = 1;
    optional string message = 2 [default=""];
}

message SelectCity {
    required int32 cityID = 1;
}

message SelectCityResponse {
    enum Type {
        FAILURE = 0;
        SUCCESS = 1;
    }
    required Type type = 1;
}

message Map {
    required string name = 1;
    required string heightmap = 2;
    // Whops! We are changing this. This will be the flag to identify the map as a sc4 map
    optional string bitmap = 3;
}

//This is THE incarnation of the game state which a client recieves when it first conects
//This holds everything a client needs to generate the visual world for the player
message GameState {
    required string name = 1; //Name of the region
    required string heightmap = 2; //Current state of heightmap. Encoded in base64 string
}
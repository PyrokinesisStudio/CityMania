// Protocols common to both client and server
// Base container which stores all messages
message Container {
    optional Chat chat = 1;
    optional Login login = 2;
    optional LoginResponse loginResponse =3;
    optional SelectCity selectCity = 4;
    optional SelectCityResponse selectCityResponse = 5;
    repeated Map maps = 6;
    optional int32 serverState =7;
    
    optional GameState gameState = 10;
    
    // Client --> Server requests. 100-199
    optional bool requestServerState = 100;
    optional bool requestMaps = 101;
    optional string mapRequest = 102;
    optional NewCityRequest newCityRequest = 103;
    optional int32 requestGameState = 104; //0: Region, Any other value is cityid. This determines what is sent to client
    
    // Server --> Client responses, usually a bool, 200-299
    optional NewCityResponse newCityResponse = 200;
    optional GameState gamestate = 201;
    optional MapSelectError mapSelectError = 202;
    optional City newCity = 203; // Broadcasted to let clients know new city is founded
}

message Chat {
    //Chat message
    required string message = 1;
    optional string to = 2;
    optional string sender = 3; //Added by server
}

message Login {
    required string name = 1;
    required string password = 2 [default=""];
    required string regionPassword = 3 [default=""];
}

message LoginResponse {
    enum Type {
        FAILURE = 0;
        SUCCESS = 1;
    }
    enum Usertype{
        OBSERVE = 0;
        NORMAL = 1;
        GM = 2;
        ADMIN = 3;
        OWNER = 4;
    }
    //User levels. 0 Observe only, 1 normal, 2 gm, 3 admin, 4 owner
    //This is for client ui presentation, server will still validate accordingly
    required Type type = 1;
    optional string message = 2 [default=""];
    required Usertype usertype = 3;
}

message SelectCity {
    required int32 cityID = 1;
}

message SelectCityResponse {
    enum Type {
        FAILURE = 0;
        SUCCESS = 1;
    }
    required Type type = 1;
}

message Map {
    required string name = 1;
    required string heightmap = 2;
    // Whops! We are changing this. This will be the flag to identify the map as a sc4 map
    optional string bitmap = 3;
}

//This is THE incarnation of the game state which a client recieves when it first conects
//This holds everything a client needs to generate the visual world for the player
// GameState should only be sent if serverstate is 1 or more
message GameState {
    required string name = 1; //Name of the region
    required string heightmap = 2; //Current state of heightmap. Encoded in base64 string
    repeated Tile tiles = 3;
    repeated City cities = 4;
}

message Tile {
    required int32 id = 1;
    required int32 positionx = 2;
    required int32 positiony = 3;
    optional int32 cityid = 4;
}

//Client requests to found a new city at this location
message NewCityRequest {
    required string name = 1;
    required int32 positionx = 2;
    required int32 positiony = 3;
    optional string password = 4;
}

message NewCityResponse {
    enum Type {
        FAILURE = 0;
        SUCCESS = 1;
    }
    required Type type = 1;
    optional string message = 2 [default=""];
}

message MapSelectError {
    optional string message = 1 [default=""];
}

message City {
    required int32 id = 1;
    optional string name = 2;
    optional string mayor = 3;
    optional int32 population = 4; //Basic population number
    optional int32 money = 5;
}